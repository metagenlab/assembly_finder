import pandas as pd

rule generate_assembly_tables:
    conda: '../envs/Assembly_finder.yml'

    output: 'tables/not_filtered/{entry}.tsv'

    params: NCBI_key = config['NCBI_key'], NCBI_email = config['NCBI_email'],
          comp=config['complete_assemblies'],ref=config['reference_assemblies'],
          rep=config['representative_assemblies'],met=config['exclude_from_metagenomes'],
          gb=config['Genbank_assemblies'],rs=config['Refseq_assemblies']

    resources: ncbi_requests=1

    log: 'logs/not_filtered/{entry}.log'

    script: 'assembly_table.py'


rule filter_assembly_tables:
    conda: '../envs/Assembly_finder.yml'

    input: 'tables/not_filtered/{entry}.tsv'

    output: 'tables/filtered/{entry}.tsv'

    params: tb_path=config["input_table_path"], rank_filter=config['Rank_to_filter_by']

    log: 'logs/filtered/{entry}.log'

    script: 'filter_table.py'


entries=list(pd.read_csv(config['input_table_path'],delimiter='\t')['UserInputNames'])
checkpoint combine_assembly_tables:
    conda: '../envs/Assembly_finder.yml'

    input: expand('tables/filtered/{entry}.tsv',entry=entries)

    output: 'assemblies-summary.tsv'

    script: 'combine_tables.py'

rule download_assemblies:
    conda: '../envs/Assembly_finder.yml'

    input: 'assemblies-summary.tsv'

    output: 'assembly_gz/{assemblyname}.fna.gz'

    params: NCBI_email = config['NCBI_email']

    log: 'logs/downloads/{assemblyname}.log'

    script: 'dl.py'